// These mixins are sort of functions I use to map through the sort of variable arrays I have in _variables.scss
// For example, without mixin, for font-size, I would need to write font-size: map-get($font-size, 2xl); 
// but with mixin, I can just write @include font-size(2xl);, which is much easier to read and write
// Some other mixins are for redundant CSS code I wanted to avoid, such as flex, flex-direction etc which tend to always come together

@use "../abstracts/variables" as *;

// -----------------------------------------------------------------------------
// Spacing
// Usage: @include spacing(md);
// -----------------------------------------------------------------------------
@mixin spacing($size, $property: padding) {
  #{$property}: map-get($spacing, $size);
}

// -----------------------------------------------------------------------------
// Margin helpers
// Usage: @include margin(md, top);
// -----------------------------------------------------------------------------
@mixin margin($size, $direction: all) {
  @if $direction == all {
    margin: map-get($spacing, $size);
  } @else if $direction == top {
    margin-top: map-get($spacing, $size);
  } @else if $direction == right {
    margin-right: map-get($spacing, $size);
  } @else if $direction == bottom {
    margin-bottom: map-get($spacing, $size);
  } @else if $direction == left {
    margin-left: map-get($spacing, $size);
  } @else if $direction == x {
    margin-left: map-get($spacing, $size);
    margin-right: map-get($spacing, $size);
  } @else if $direction == y {
    margin-top: map-get($spacing, $size);
    margin-bottom: map-get($spacing, $size);
  }
}

// -----------------------------------------------------------------------------
// Padding helpers
// Usage: @include padding(md, top);
// -----------------------------------------------------------------------------
@mixin padding($size, $direction: all) {
  @if $direction == all {
    padding: map-get($spacing, $size);
  } @else if $direction == top {
    padding-top: map-get($spacing, $size);
  } @else if $direction == right {
    padding-right: map-get($spacing, $size);
  } @else if $direction == bottom {
    padding-bottom: map-get($spacing, $size);
  } @else if $direction == left {
    padding-left: map-get($spacing, $size);
  } @else if $direction == x {
    padding-left: map-get($spacing, $size);
    padding-right: map-get($spacing, $size);
  } @else if $direction == y {
    padding-top: map-get($spacing, $size);
    padding-bottom: map-get($spacing, $size);
  }
}

// -----------------------------------------------------------------------------
// Gap helpers
// Usage: @include gap(md);
// -----------------------------------------------------------------------------
@mixin gap($size) {
  gap: map-get($gap, $size);
}

// -----------------------------------------------------------------------------
// Section spacing
// Usage: @include section-spacing;
// -----------------------------------------------------------------------------
@mixin section-spacing {
  padding-top: map-get($spacing, 'section-y-sm');
  padding-bottom: map-get($spacing, 'section-y-sm');
  
  @include min-width(lg) {
    padding-top: map-get($spacing, 'section-y');
    padding-bottom: map-get($spacing, 'section-y');
  }
}

// -----------------------------------------------------------------------------
// Container width
// Usage: @include container-width(desktop);
// -----------------------------------------------------------------------------
@mixin container-width($size, $property: max-width) {
  #{$property}: map-get($container, $size);
}

// -----------------------------------------------------------------------------
// Media query (mobile-first)
// Usage: @include min-width(md) { ... }
// -----------------------------------------------------------------------------
@mixin min-width($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint: `#{$breakpoint}`. Available: #{map-keys($breakpoints)}.";
  }
}

// -----------------------------------------------------------------------------
// Z-index
// Usage: @include z-index(modal);
// -----------------------------------------------------------------------------
@mixin z-index($layer) {
  z-index: map-get($z-index, $layer);
}

// -----------------------------------------------------------------------------
// Border radius
// Usage: @include border-radius(md);
// -----------------------------------------------------------------------------
@mixin border-radius($size) {
  border-radius: map-get($radius, $size);
}

// -----------------------------------------------------------------------------
// Transition duration
// Usage: @include transition-duration(normal);
// -----------------------------------------------------------------------------
@mixin transition-duration($speed) {
  transition-duration: map-get($durations, $speed);
}

// -----------------------------------------------------------------------------
// Transition
// Usage: @include transition(transform, normal, ease-in-out);
// -----------------------------------------------------------------------------
@mixin transition($property, $speed, $easing: ease) {
  transition-property: $property;
  transition-duration: map-get($durations, $speed);
  transition-timing-function: $easing;
}

// -----------------------------------------------------------------------------
// Font size
// Usage: @include font-size(2xl);
// -----------------------------------------------------------------------------
@mixin font-size($size) {
  font-size: map-get($font-size, $size);
}

// -----------------------------------------------------------------------------
// Font weight
// Usage: @include font-weight(bold);
// -----------------------------------------------------------------------------
@mixin font-weight($weight) {
  font-weight: map-get($font-weight, $weight);
}

// -----------------------------------------------------------------------------
// Letter spacing
// Usage: @include letter-spacing(tight);
// -----------------------------------------------------------------------------
@mixin letter-spacing($value) {
  letter-spacing: map-get($letter-spacing, $value);
}

// -----------------------------------------------------------------------------
// Flex
// Usage: @include flex(row, space-between, center);
// -----------------------------------------------------------------------------
@mixin flex($direction, $justify, $align) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
}

// -----------------------------------------------------------------------------
// Grid
// Usage: @include grid(3, md);
// -----------------------------------------------------------------------------
@mixin grid($columns, $gap-size) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: map-get($gap, $gap-size);
}

// -----------------------------------------------------------------------------
// Text truncate
// Usage: @include text-truncate;
// -----------------------------------------------------------------------------
@mixin text-truncate {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

// -----------------------------------------------------------------------------
// Responsive font size
// Usage: @include responsive-font-size(1.5rem, 1.25rem);
// -----------------------------------------------------------------------------
@mixin responsive-font-size($large-screen, $small-screen) {
  font-size: $large-screen;

  @media screen and (max-width: 1280px) {
    font-size: $small-screen;
  }
}

// -----------------------------------------------------------------------------
// Shadow helpers
// Usage: @include shadow(md);
// -----------------------------------------------------------------------------
@mixin shadow($size) {
  @if $size == sm {
    box-shadow: $shadow-sm;
  } @else if $size == md {
    box-shadow: $shadow-md;
  } @else if $size == lg {
    box-shadow: $shadow-lg;
  }
}

// -----------------------------------------------------------------------------
// Component container
// Usage: @include component-container;
// -----------------------------------------------------------------------------
@mixin component-container {
  padding: map-get($component, 'padding-y') map-get($component, 'padding-x');
  margin-bottom: map-get($component, 'margin-bottom');
}

// -----------------------------------------------------------------------------
// Randomize projects layout in portfolio page
// -----------------------------------------------------------------------------
@mixin random-project-layout($index) {
  .project-image {
    &:nth-child(1) {
      grid-column: #{calc(1 + $index * 2)} / span 7;
      grid-row: 1 / span 6;
      z-index: 3;
    }

    &:nth-child(2) {
      grid-column: #{calc(8 - $index)} / span 4;
      grid-row: 4 / span 3;
      z-index: 2;
      transform: translateY(#{calc(-20% - $index * 5%)});
    }

    &:nth-child(3) {
      grid-column: #{calc(9 + $index)} / span 3;
      grid-row: 2 / span 3;
      z-index: 1;
      transform: translateY(#{calc(10% + $index * 7%)});
    }
  }
}

// -----------------------------------------------------------------------------
// Touch device detection
// Usage: @include touch-device { ... }
// -----------------------------------------------------------------------------
@mixin touch-device {
  @media (hover: none) and (pointer: coarse) {
    @content;
  }
}